plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT' apply false
	id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
	id 'maven-publish'
	id 'glue' version '0.0.4'
}

glue {
	targets = ['common', '1_17', '1_19']
}

subprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'com.github.johnrengelman.shadow'

	sourceCompatibility = targetCompatibility = JavaVersion.toVersion(project.java_version as Integer)

	archivesBaseName = project.archives_base_name
	version = project.mod_version
	group = project.maven_group

	repositories {
		mavenCentral()
	}

	configurations {
		shadow
	}

	dependencies {
		// To change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		implementation "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
		shadow("com.moandjiezana.toml:toml4j:${project.toml4j_version}") {
			exclude(module: "gson")
		}

		// Testing engines
		testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.release = project.java_version as Integer
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
	}

	shadowJar {
		relocate "com.moandjiezana.toml", "io.minepkg.companion.shadowed.com.moandjiezana.toml"
		configurations = [project.configurations.shadow]
		classifier "shadow"
	}

	remapJar {
		dependsOn(shadowJar)
		input.set(shadowJar.archiveFile)
	}

	// configure the maven publication
	publishing {
		publications {
//			mavenJava(MavenPublication) {
//				from components.java
//			}
		}

		// Select the repositories you want to publish to
		// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
		repositories {
			// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		}
	}
}
